name: CI/CD Pipeline

on:
  push:
    branches:
      - feature/new-relic

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    env:
      NEW_RELIC_APP_NAME: my-nodejs-app
      NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: install new-relic
        run: npm install newrelic
       
      - name: copy new-relic.js to root directory
        run: |
          cp ./node_modules/newrelic/newrelic.js .
          echo "New Relic configuration copied successfully."
          ls -ltr

      - name: Install dependencies
        run: npm install

      - name: Run linter
        run: npm run lint

  build-and-push:
    name: Build & Push Docker Image to GCP Artifact Registry
    needs: lint
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: my-nodejs-app
      SHORT_COMMIT_SHA: ${GITHUB_SHA::7}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ vars.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ vars.REGION }}-docker.pkg.dev --quiet

      - name: Build Docker image with commit SHA tag
        run: |
          docker build -t ${{ vars.REGION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.SHORT_COMMIT_SHA }} .

      - name: Push Docker image with commit SHA tag
        run: |
          docker push ${{ vars.REGION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.SHORT_COMMIT_SHA }}
  
  deploy:
    name: Deploy to GKE
    needs: build-and-push
    runs-on: self-hosted   
    env:
      IMAGE_NAME: my-nodejs-app
      SHORT_COMMIT_SHA: ${GITHUB_SHA::7}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: check whoami and kubectl
        run: |
          whoami
          kubectl version --client
      
      - name: Authenticate to GKE Cluster
        run: |
          gcloud container clusters get-credentials ${{ vars.CLUSTER_NAME }} \
            --zone ${{ vars.GKE_ZONE }} \
            --project ${{ vars.PROJECT_ID }} \
            --internal-ip
          kubectl get nodes

      - name: check kubeconfig
        run: |
          kubectl config current-context
          kubectl get nodes

      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          mv kustomize /home/github-runner
      
      - name: Set image tag using Kustomize
        env:
          REGION: ${{ vars.REGION }}
          PROJECT_ID: ${{ vars.PROJECT_ID }}
          REPOSITORY: ${{ vars.REPOSITORY }}
        run: |
          cd k8s
          /home/github-runner/kustomize edit set image "${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_NAME}=${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_NAME}:${{ env.SHORT_COMMIT_SHA }}"
           
      - name: Deploy to GKE
        run: |
          kubectl apply -k ./k8s

      - name: Wait for External IP of the service
        run: |
          echo "Waiting for External IP of service drage..."
          for i in {1..36}; do
            IP=$(kubectl get svc hello-node -n development -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$IP" ]; then
              echo "External IP found: $IP"
              exit 0
            fi
            echo "No IP yet, retrying in 5 seconds..."
            sleep 5
          done
          echo "Timed out waiting for External IP"
          exit 1
          
  